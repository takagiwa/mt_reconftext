<!DOCTYPE html>


<html xmlns="http://www.w3.org/1999/xhtml" lang="ja">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>3. FPGA について</title>
    
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head>
  <body role="document">

    <div class="related" role="navigation" aria-label="related navigation">
      <h3>ナビゲーション</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.xhtml" title="総合索引"
             accesskey="I">索引</a></li>
        <li class="right" >
          <a href="04_vhdl.xhtml" title="4. VHDL"
             accesskey="N">次へ</a> |</li>
        <li class="right" >
          <a href="02_stopwatch.xhtml" title="2. ストップウォッチについて"
             accesskey="P">前へ</a> |</li>
        <li class="nav-item nav-item-0"><a href="index.xhtml">Text of reconfigurable device 0.0.1 ドキュメント</a> &#187;</li> 
      </ul>
    </div>

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="fpga">
<h1>3. FPGA について</h1>
<p>FPGA はディジタル信号を取り扱う IC、LSI の一種です。</p>
<p>ターゲットの回路が決まっており、予算が十分にあれば、専用の IC 、LSI を製造するのが、デバイス単価、動作周波数、消費電力のいずれも有利です。</p>
<p>それに対し FPGA は内部に組み込む回路を書き換えられることが利点となっています。</p>
<p>「試作・実験」「少量多品種」に向いたデバイスです。</p>
<p>使用例:</p>
<dl class="docutils">
<dt>液晶テレビ</dt>
<dd>FPGA の単価は一般に同じ規模の LSI より高いため、家電製品に FPGA が使われることはありませんが、ある液晶テレビでは一時 FPGA が使われました。
理由は明らかではありませんが、恐らく LSI の設計、製造が間に合わないか、組み込む回路に変更が入る恐れがあったものと考えられます。
LSI は設計や製造に時間がかかり、また内部の回路変更には作り直しが必要ですが、FPGA では直ぐに回路を組み込むことができ、データを入れ替えるだけで変更も可能です。</dd>
<dt>携帯電話と基地局の試作機</dt>
<dd>携帯電話や基地局は世界的な規格に則って作られますが、規格が固まってから作っていると発売が遅くなってしまいます。
規格が固まる前にシステムを作ってしまい、規格変更に合わせてあとから回路が変更できるよう、FPGA が大量に使われます。
規格や回路が固まったら、必要に応じて LSI に移行します。</dd>
<dt>株・為替自動取引</dt>
<dd>コンピュータによる高頻度取引では１秒以下の周期で株価、為替の情報を監視し、自身に有利なタイミングで売買を行います。
ソフトウェアだけでの処理は遅いと考えられており、FPGA による処理が併用されます。
処理のアルゴリズムは使用者毎に異なるため、LSI 化はできず、FPGA が使用されます。</dd>
</dl>
<div class="admonition note">
<p class="first admonition-title">注釈</p>
<p>実際にこの授業で使用するデバイスは「PLD」と呼ばれます。PLD は Programmable Logic Device の略です。プログラム可能な論理デバイス、となります。</p>
<p>対して FPGA は Field Programmable Gate Array の略です。現場 (Field) でプログラム可能なゲート (論理) の集合、となります。</p>
<p>できることはほぼ同じですが、以下のような特徴で分けています。</p>
<p>CPLD</p>
<ul class="simple">
<li>フラッシュメモリを内蔵し、電源を入れるとすぐ使える。</li>
<li>回路規模は小さめ。</li>
<li>基本的に論理回路しか入ってない。</li>
<li>動作速度が比較的高い。</li>
<li>構造上、XOR が少し苦手。</li>
</ul>
<p>FPGA</p>
<ul class="simple">
<li>動作のプログラムは揮発性のメモリに格納されるので、電源を切ると内容が失われる。そのため別途フラッシュメモリが必要。</li>
<li>回路規模はかなり大きい。</li>
<li>高機能 (乗算用ハードウェアが入っていたり、メモリが入っていたりする) 。</li>
<li>動作速度は今ではだいぶ高くなってきた。</li>
</ul>
<p>いずれも D フリップフロップと組み合わせ回路がセットになっており、その入力をプログラムするような形です。このセットがデバイスの中に多数組み込まれ、相互に接続できるよう配線とスイッチも同様に多数用意されます。</p>
<p class="last">CPLD と FPGA の間の大きな違いは組み合わせ回路の構成です。CPLD は大量の AND と多入力 OR を組み合わせていますが (実際には NOT も入ります) 、FPGA は AND 、OR に縛られない LUT (LookUp Table) を使用します。たとえば４入力の AND 、４入力の OR に限らず、&#8221;4&#8221; 等の任意の数値と一致したときに H を出力する、というようなことも簡単にできるよう、より柔軟な構造になっています。</p>
</div>
<div class="section" id="hdl">
<h2>3.1. HDL</h2>
<p>ディジタル回路を組み込んだ IC や LSI の開発では、初期には AND 、OR 、NOT 、フリップフロップを CAD 上で回路図のように配置して接続していました。</p>
<p>こういった CAD は、IC 、LSI メーカ毎に異なるため、たとえば完成したデータを違う LSI メーカで製造しなければいけなくなったとき、互換性が無いため入力＆確認し直しが必要になっていました。</p>
<p>こういった状況を避けるために、IC 、LSI の開発も、ソフトウェアのようにテキストで行おうという動きがでてきました。このジャンルの言語は HDL  (Hardware Description Language) と呼ばれます。</p>
<p>ソフトウェアと同様、HDL も様々なものが開発されましたが、現在の主流は VerilogHDL と VHDL です。</p>
<p>VerilogHDL、VHDL は FPGA だけでなく、IC、LSI の開発にも利用されます。</p>
</div>
<div class="section" id="veriloghdl-vhdl">
<h2>3.2. VerilogHDL と VHDL</h2>
<p>各言語の特徴を以下に示します (筆者の独断と偏見を含む)</p>
<p>VerilogHDL</p>
<ul class="simple">
<li>民間主導- ツールメーカが開発した。</li>
<li>比較的便利な記述ができるようになっている。</li>
<li>文法上記述ミスが許容される傾向がある＝ デバッグ時に大変なことが多い。</li>
<li>日本でのシェアは、こちらがかすかに多いかもしれない。</li>
<li>C 言語に近い、と評されることがあるものの、上記のような動きがあることから、むしろ BASIC の方が近いと感じる。</li>
<li>無料のシミュレータがあるため、特に趣味の範囲での人気は VHDL より高い模様。</li>
</ul>
<p>VHDL</p>
<ul class="simple">
<li>米国国防省主導- ソフトウェアのプログラミング言語をベースに策定</li>
<li>融通が利かず、あまり高機能でない。コード量は多くなる傾向かもしれない。</li>
<li>海外でのシェアは、こちらがかすかに多いかもしれない。</li>
<li>BASIC ににたキーワードもあるものの、文法エラーの検出の強さは C 言語に近い。</li>
</ul>
</div>
<div class="section" id="id1">
<h2>3.3. 高位合成</h2>
<p>HDL は一般にクロックや信号の衝突などソフトウェアとは異なる考え方が必要になります。それだけ、HDL のプログラマはソフトウェアのプログラマに比べ人口が少ないです。</p>
<p>それでも FPGA に魅力を感じている人々が長年ツールを開発し続け、2014年頃からそれが安価に入手できるようになりました。</p>
<p>Xilinx 社は HLS という名前で、C 言語での FPGA 開発ができるようになっています。</p>
<p>Altera 社、Xilinx 社とも OpenCL 対応のデータ処理向けの開発環境をそろえています。</p>
<p>より高レベル (ハードウェアから遠いという意味で) な言語によるアプローチもあり、これらは高位合成と呼ばれています。</p>
<p>現在は Java 、Python などの言語での FPGA 開発が可能になっています。</p>
<p>ただし FPGA に組み込む回路全てをこれらの言語だけで開発できないパターンもあり、そういった箇所には引き続き VerilogHDL、VHDL が使われます。</p>
</div>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>

    <div class="footer" role="contentinfo">
        &#169; Copyright 2016, Masayuki Takagiwa.
      このドキュメントは <a href="http://sphinx-doc.org/">Sphinx</a> 1.4.6 で生成しました。
    </div>
  </body>
</html>